ALUGUE SEU IMÓVEL ROADMAP
_-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-_

Concluídos:
OK. Organizar os imoveis ativos por ordem de registro do contrato atual deles.
OK. (só mudei a cor da borda) Colocar um deseninho nas card dos ativos (emoji talvez).
OK. (preferi deixar como está pois iria desperdiçar muita memoria no banco de dados) salvar todas as preferencias
            do usuário em um dicionario em uma célula da tabela dele, não em varias como atualmente.
Ok. Contrato não desativa, arrumar.
OK. Os cards nos ativos estão retornando tudo misturado (arrumar).
OK. O botão ir em eventos não funciona de primeira quando não existe o data_eventos_i preenchido no models do usuário.
OK. (resolvido mas com uma pequena gambiarra, utilizando o campo emailed=true pra indicar recibo ok)Destivar o
            botão desnecessário(da vez) no histórico de notificações na offcanvas.
OK. Fake está criando contratos com datas sobresalentes, arrumar.
OK. Criar uma uuid única para cada usuário, para proteger os arquivos dele(segurança aumentada)
OK. (mantive só o codigo) Quando recriar as parcelas(model.parcelas) ao usuário editar o período do contrato, manter
        recibos true p/ os meses q ja receberam recibo(não tão urgente mas bom)(ou manter todas as outras informações).
OK. Apagar a tabela do usuário quando ele terminar a sessão.
OK. Colocar a opção de data preenchida nos recibos.
OK. (fiz um pouco diferente, usei o model das anotações)Criar uma barra lateral com afazeres, dp it latter simples.
OK. Ao excluir uma anotação, excluir a tarefa dela tbm.
OK. (mantive nas sessions (pois em cookies tem limite de caracteres e problemas de ms) mas com tempo limite,
        configurável, em settings.py)Salvar as forms com erros em cookies, não na session, economiza memória do
        servidor e coloca tempo limite de duração.
OK. (usei o built-in do django, jango.template.defaultfilters)Colocar em português manualmente na tabea e nos recibos
        e outros q usem.
OK. AS vezes o recibo não obedece a form do usuário(preenchimento de data). arrumar.
OK. Arrumar o UsuarioAdmin no admin.py.
OK. Concluir total_quitado e faltando_p_quitar de contratos.
OK. Arrumar tabela onde contratos mantém 'O Pagam. VENCEU' até mesmo qdo vencimento se encontra depois do dia atual,
        quando algum contrato existia e foi apagado antes do novo ser criado.
OK. Validar registros dos usuário impedindo que eles cadastrem locatários ou imoveis duplicados.
OK. (e ainda consertei various bugs no caminho) Criar formulário de locatário: endereço, para contratos não residenciais.
OK. Adicionar possibilidade de criar um gasto geral, não exclusivo de algum imóvel.
OK. Arrumar CLÁUSULA DÉCIMA PRIMEIRA do contrato, opção casa ou prédio.
OK. Algmas listas devem mostrar apenas os contratos ativos, não tudo.
OK. (Falta configurar, no fim do projeto) Aplicar o django allauth https://www.youtube.com/watch?v=Q4Q3S7HLp4w
OK. Melhorar o sistema de fale com o desenvolvedor, colocando um mini fórum onde os usuário dão sugestões de melhorias
        com sistema de votação.
Ok. Proteger os arquivos dos usuarios, todos da pasta media, para que não sejam acessados por outros usuário que não os
 criadores ou pela internet por qualquer um.
OK. Aplicar o cursor pointer em alguns itens nos templates. (copia logo pae: style="cursor:pointer;")
OK. (refatorei tudo praticamente) Tarefas apagam ou ficam bugadas quando se mexe no período do contrato ou se
        apaga algum registro de pagamento.
OK. Corrigir as tabelas duplas no histórico, cor sim 'cornão'.
OK. Implementar filtros na página 'visão geral', com cliques nos títulos das colunas.
OK. Ajeitar as urls que pedem <int:pk> sem necessidade(as views nem usam).
OK. Criar uma obrigação de o usuário colocar no minimo duas palavras no nome do locatário.
OK. Aplicar atomicidade no gerencimento do banco de dados: https://www.youtube.com/watch?v=50N400-3MTI
OK. Criar um link, chamado link de requisição, próprio de cada usuário, que ele envia para o locatário, para que o
        locatário, através dele, possa cadastrar suas informações para o preenchimento do contrato. Quando cadastrado,
        o usuário recebe uma notificação de aviso para dar procedimento, criando o contrato para este locatário.
OK. Na primeira inicialização do sistema:
        1. Importar os modelos de contratos padrões do txt na pasta deles para a tabela.
        2. Criar as pastas de midia.
Ok. (fiz só visualmente no front) Renomear tarefas para notificações de novo :/
Ok. Criar o sistema de importação dos dados em um clique da planilha do prédio para o site.
Ok. Os recibos de fbaugusto sao alterado ao 'criar pagamentos'(no botão executar) para outro usuário.
Ok. Visão geral diz que pagou mais parcelas do realmente pagou(vide contrato marcio).
Ok. Mostrar todos os contratos na tabela.pdf, não apenas os ativos, porém esbranquiçar os inativos.
Ok. Corrigir: Validador impede cadastro de contrato novo quando é feito em um imóvel num período onde já existe outro
        contrato rescindido cadastrado. --> Rescindiu, desconsidera. Depois cria outra validação para caso o usuário
        retire a rescisão e já tenha outro contrato no período dele.
Ok. Criar prioridade de aparição dos contratos ativados sobre os rescindidos nos esbranquiçados da tabela pdf.
OK. Mostrar para o usuário o que será apagado(caso haja) caso ele exclua algum item registrado, em imóveis e contratos.
OK. Mostrar no visão geral o total por grupo de imóveis e por tipo.
Ok. (FICT_QTD ficou como initial do formulario, não fiz o sistema de configurações)Criar o multiplicador no botão de
        gerar fakes, eliminando o FICT_QTD em settings / adicionar função de criação dos itens espalhada para todos
        os usuários existentes / arrumar views.py linha 1891 / Fazer um sistema de configurações do fake test em settings.

_-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-_

Fazer:
Procurar uma forma de impedir o envio de múltiplos forms clicando várias vezes no botão de enviar um form.

Testar os métodos e managers procurando formas de diminuir o uso do banco de dados por parte deles, buscando sempre
        informações de cada usuário nas queryes, nunca a partir de todos os objetos.

Implementar filtros/buscas nas paginas do botão histórico.

Criar um botão de painel com configurações diversas, sistema de ativação de slots com tickets e compra de tickets
        com bitcoin via lightning network, e botão de backup de todos os dados, bem como, botão de restaurar
        (criptografados e únicos para cada usuário).

Tarefas: Receber contrato(marcar contrato como em mãos na tarefa) = OK. Quando a sugestão do usuário for aprovada = OK.
        Quando o aluguel de alguém vencer(e faltando 5 dias). Quando o contrato de alguém vencer(e faltando 30 dias),
        Quando o desenvolvedor responder uma mensagem.

Melhorar o nome do contrato quando é o mesmo locador no mesmo imóvel colocando uma contagem ao invés da data no
        final(ou junto)

Melhorar a exibição do painel gerador de fictícios.

Criar a função comunidade no editor de modelos.
        1. colocar o visualizar / 2. colocar descrição.

Colocar a variável 'mobiliado' no contrato pdf.

Adaptar o site para celulares(pelo menos a parte de auto cadastro do locatário).

Não utilizar diretamente o uuid do usuário no front-end, apenas derivados deste uuid para casa tipo de utilização
        baseados no uuid principal do usuário. É mais seguro! Aula: https://www.youtube.com/watch?v=lVTGNXnft7U

Aplicar o redis cache https://youtu.be/7rc5KA0nrwk

Ja ta na hora de instalar o celery e começar a usar.

Modelos devem buscar suas tarefas a partir de método, não de atributos, já que cada modelo poderá ter mais do que uma
        tarefa. Ex: locatario.da_tarefa --> locatario.da_tarefa(filtros). Por enquanto todos os item que possuem
        tarefa, podem ter apenas uma tarefa atribuída a sí, cada, porém, o modelo do usuário e do locatário poderão
        ter mais de uma no futuro, portanto, resolver isto. Como atribuir várias tarefas a um único modelo? como vai
        ficar o atributo da_tarefa?

_-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-_

PROBLEMAS encontrados, SEM SOLUÇÃO até agora:
signal post_delete não é chamado quando é deletado pela area admin do site
Arrumar os parâmetros das models que estão em letras maiúsculas, corrigir também nas forms.

_-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-_

Melhorias muito futuras:
Arrumar e organizar, deixar otimizado o painel administrativo(django admin) completo.
Criar o help (sistema de dicas e recomendações espalhados por to_do o site, referentes ao manuseio do mesmo e a regras
        e dicas de locação)
Confirmação de email e celular.
Criptografar informações sensíveis no banco de dados(ex: cpf dos locatários)
melhorar a performance nas querys: https://www.youtube.com/watch?v=FNn_qwH1Yi0
aplicar ajax um dia: https://www.youtube.com/watch?v=hISSGMafzvU / https://www.youtube.com/watch?v=QDdLvImfq_g
Aplicar o celery.

_-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-__-''-_

Regras do programador:

1. Passos para criação de uma tarefa para uma model:
    1.1. A classe da model autora recebe este parâmetro:
    da_tarefa = models.OneToOneField('Tarefa', null=True, blank=True, on_delete=models.SET_NULL)

    1.2. Criar o signal que vai criar a tarefa de acordo com o momento desejado(na criação do objeto, na modificação
        de algum parâmetro, gatilho temporal(celery), etc...)
    1.3. Configurar a nova tarefa na classe Tarefa em models, nos seguintes métodos:
        a. autor_tipo = Adicionar o numero referente ao novo autor da tarefa (usada pelo template).
        b. autor_tipo_display = Adicionar o display para esta tarefa (usada pelo template).
        c. tarefa_nova = Verifica se a tarefa aparecerá em 'tarefas novas' ou em 'histórico de tarefas' (cada autor tem
            a sua regra).
        d. borda = Retorna a classe(html) que gerencia a cor da borda do card da tarefa em questão(usada pelo template).
        e. texto = Retorna o texto a ser exibido na aba de tarefas(cada autor tem seu texto).
    1.4. Adicionar a exibição da tarefa nova e as urls(criar elas tbm, em urls.py) necessárias para as modificações do
        estado do autor e/ou tarefa no template (offcanvas_tarefas.html).
    1.5. Modificar a função criar_uma_tarefa em signals.py adicionando a forma/regra de recuperação(desfazer exclusão)
        da tarefa especifica desta model autora.
    1.6. Criar o signal pre delete que vai apagar a tarefa no momento em que a instancia referenciada por ela for
        apagada.